class Solution {
public:
    vector<string> restoreIpAddresses(string s) {
        vector<string> result;
        vector<string> current;
        backtrack(s, 0, current, result);
        return result;
    }
    
private:
    void backtrack(const string& s, int start, vector<string>& current, vector<string>& result) {
        if (current.size() == 4) {  // IP address should have exactly 4 parts
            if (start == s.size()) {  // If we've used all characters, it's a valid combination
                result.push_back(join(current));  // Join the parts with dots
            }
            return;  // Otherwise, return since we can't use more parts
        }
        
        for (int len = 1; len <= 3; ++len) {  // Try each possible part length (1 to 3 characters)
            if (start + len > s.size()) break;  // If length goes out of bounds, break
            
            string part = s.substr(start, len);  // Extract a part of the current length
            if (isValid(part)) {  // If the part is valid, add it to the current combination
                current.push_back(part);
                backtrack(s, start + len, current, result);  // Recurse for the next part
                current.pop_back();  // Backtrack: remove the last part added
            }
        }
    }
    
    bool isValid(const string& part) {
        if (part.size() > 1 && part[0] == '0') return false;  // Leading zeros are not allowed
        int num = stoi(part);  // Convert the part to an integer
        return num >= 0 && num <= 255;  // Valid IP address parts range from 0 to 255
    }
    
    string join(const vector<string>& parts) {
        string ip;
        for (int i = 0; i < parts.size(); ++i) {
            ip += parts[i];
            if (i != parts.size() - 1) ip += '.';  // Add dot between the parts
        }
        return ip;
    }
};
