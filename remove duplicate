class Solution {
public:
    string removeDuplicateLetters(string s) {
        vector<int>lastindex(26,0);
        vector<bool>seen(26,false);
        stack<char>st;

        // int n= s.size();

        for(int i=0;i<s.length();i++){
            lastindex[s[i]-'a']=i;
        }

        for(int i=0;i<s.size();i++){
            int curr = s[i]-'a';

            if(seen[curr]) continue;

            while(st.size()>0 && st.top()>s[i] &&  i<lastindex[st.top()-'a']){
                seen[st.top()-'a']=false;
                st.pop();
            }
            st.push(s[i]);
            seen[curr]=true;
        }

        string ans="";
        while(st.size()>0){
            ans+=st.top();
            st.pop();
        }

        reverse(ans.begin(),ans.end());
        return ans;      
        
    }
};

// apprtoach 2

unordered_map<char, int> count;
    for (int i = 0; i < str.length(); i++) {
        count[str[i]]++;
    }
    // iterating through the unordered map
    for (auto it : count) {
        if (it.second > 1)
            cout << it.first << ", count = " << it.second
                 << "\n";
    }

// approach 3

void printDuplicates(string str)
{
    int len = str.length();
    sort(str.begin(), str.end());
 
    for (int i = 0; i < len; i++) {
        int count = 1;
        while (i < len - 1 && str[i] == str[i + 1]) {
            count++;
            i++;
        }
        if (count > 1) {
            cout << str[i] << ", count = " << count << endl;
        }
    }
}
