
Given a string s. In one step you can insert any character at any index of the string.
Return the minimum number of steps to make s palindrome.
A Palindrome String is one that reads the same backward as well as forward.

 

Example 1:

Input: s = "zzazz"
Output: 0
Explanation: The string "zzazz" is already palindrome we do not need any insertions.
Example 2:

Input: s = "mbadm"
Output: 2
Explanation: String can be "mbdadbm" or "mdbabdm".
Example 3:

Input: s = "leetcode"
Output: 5
Explanation: Inserting 5 characters the string becomes "leetcodocteel".



class Solution {
private:
    
    int solveTabulation(string &s, string &t, int p1, int p2)
    {
        vector<vector<int>> dp(p1+1, vector<int> (p2+1, 0));

        for(int i=1;i<=p1;i++)
        {
            for(int j=1;j<=p2;j++)
            {
                int ans = 0;
                if(s[i-1] == t[j-1])
                    ans = 1 + dp[i-1][j-1];
                else
                    ans = max(dp[i-1][j], dp[i][j-1]);
                
                dp[i][j] = ans;
            }
        }
        return dp[p1][p2];
    }

public:
    int minInsertions(string s) {
        int n = s.size();
        string t=s;
        reverse(t.begin(), t.end());
       
        int longestPalindrome = solveTabulation(s, t, n, n);
        return n - longestPalindrome;
    }
};
