class Solution {
public:
    bool rotateString(string s, string goal) {
        if (s.length() != goal.length()) {
            return false; // If lengths are different, rotation is not possible
        }

        for (int i = 0; i < goal.length(); i++) {
            bool rotationPossible = true;

            for (int j = 0; j < s.length(); j++) {
                // Use modulo operator to handle rotation
                if (goal[(i + j) % goal.length()] != s[j]) {
                    rotationPossible = false;
                    break;
                }
            }

            if (rotationPossible) {
                return true;
            }
        }

        return false;
    }
};

// approach 2

class Solution {
public:
    bool rotateString(string s, string goal) {
        // If the lengths are different, return false
        if (s.size() != goal.size()) {
            return false;
        }

        string concatenated = goal + goal;
        int i = 0;
        int j = 0;
        int n = s.size();
        int m = concatenated.size();

        while (i < m) {
            if (concatenated[i] == s[j]) {
                j++;
                i++;
                if (j == n) {
                    return true;
                }
            } else {
                if (j != 0) {
                    i=i-j+1;
                    j = 0;
                } else {
                    i++;
                }
            }
        }

        return false;
    }
};

// approach 3

#include <iostream>
#include <algorithm>
using namespace std;

class Solution {
public:
    bool rotateString(string s, string goal) {
        if (s.length() != goal.length()) {
            return false;
        }

        string concatenated = goal + goal;

        return concatenated.find(s) != string::npos;
    }
};
