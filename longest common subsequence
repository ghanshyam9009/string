class Solution {
public:
    int solve(int i, int j, string &text1, string &text2, vector<vector<int>> &dp) {
        if (i < 0 || j < 0) {
            return 0;
        }

        if (dp[i][j] != -1) {
            return dp[i][j];
        }

        if (text1[i] == text2[j]) {
            return dp[i][j] = 1 + solve(i - 1, j - 1, text1, text2, dp);
        }

        return dp[i][j] = max(solve(i, j - 1, text1, text2, dp), solve(i - 1, j, text1, text2, dp));
    }

    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.size();
        int n = text2.size();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, -1));
        return solve(m - 1, n - 1, text1, text2, dp);
    }
};

// class Solution {
// private: 
//    int lcs(string text1, string text2,int n,int m){
     
//          if (m == 0 || n == 0)
//             return 0;
//          if (text1[ n- 1] == text2[m - 1])
//             return 1 + lcs(text1, text2, n - 1, m - 1);
//          else
//              return max(lcs(text1, text2, n, m - 1),
//                    lcs(text1, text2, n - 1, m));
        
//     }

   
// public:
//     int longestCommonSubsequence(string text1, string text2) {
//         int n= text1.size();
//         int m= text2.size();

//         return lcs(text1, text2, n , m);
//     }
        
// };
